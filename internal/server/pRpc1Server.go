// Code generated by goctl. DO NOT EDIT!
// Source: pRpc1.proto

package server

import (
	"context"

	"github.com/pz2147/p-rpc-1/internal/logic"
	"github.com/pz2147/p-rpc-1/internal/svc"
	"github.com/pz2147/p-rpc-1/prpc1"
)

type PRpc1Server struct {
	svcCtx *svc.ServiceContext
}

func NewPRpc1Server(svcCtx *svc.ServiceContext) *PRpc1Server {
	return &PRpc1Server{
		svcCtx: svcCtx,
	}
}

func (s *PRpc1Server) Ping(ctx context.Context, in *prpc1.Request) (*prpc1.Response, error) {
	l := logic.NewPingLogic(ctx, s.svcCtx)
	return l.Ping(in)
}

// Test1 测试1
func (s *PRpc1Server) Test1(ctx context.Context, in *prpc1.Test1Req) (*prpc1.Test1Resp, error) {
	l := logic.NewTest1Logic(ctx, s.svcCtx)
	return l.Test1(in)
}

// Test2 测试2
func (s *PRpc1Server) Test2(ctx context.Context, in *prpc1.Test2Req) (*prpc1.Test2Resp, error) {
	l := logic.NewTest2Logic(ctx, s.svcCtx)
	return l.Test2(in)
}

//  Test3 测试3
func (s *PRpc1Server) Test3(ctx context.Context, in *prpc1.Test3Req) (*prpc1.Test3Resp, error) {
	l := logic.NewTest3Logic(ctx, s.svcCtx)
	return l.Test3(in)
}

//  CheckAuth 风控检查
func (s *PRpc1Server) CheckAuth(ctx context.Context, in *prpc1.AuthReq) (*prpc1.AuthResp, error) {
	l := logic.NewCheckAuthLogic(ctx, s.svcCtx)
	return l.CheckAuth(in)
}
