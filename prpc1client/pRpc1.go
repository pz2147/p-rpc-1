// Code generated by goctl. DO NOT EDIT!
// Source: pRpc1.proto

package prpc1client

import (
	"context"

	"github.com/pz2147/p-rpc-1/prpc1"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AuthReq        = prpc1.AuthReq
	AuthResp       = prpc1.AuthResp
	EmptyReq       = prpc1.EmptyReq
	EmptyResp      = prpc1.EmptyResp
	Request        = prpc1.Request
	Response       = prpc1.Response
	Test1CellModel = prpc1.Test1CellModel
	Test1Req       = prpc1.Test1Req
	Test1Resp      = prpc1.Test1Resp
	Test2Req       = prpc1.Test2Req
	Test2Resp      = prpc1.Test2Resp
	Test3Req       = prpc1.Test3Req
	Test3Resp      = prpc1.Test3Resp

	PRpc1 interface {
		Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
		// ESGuide elastic教程
		ESGuide(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*EmptyResp, error)
		// Test1 测试1
		Test1(ctx context.Context, in *Test1Req, opts ...grpc.CallOption) (*Test1Resp, error)
		// Test2 测试2
		Test2(ctx context.Context, in *Test2Req, opts ...grpc.CallOption) (*Test2Resp, error)
		//  Test3 测试3
		Test3(ctx context.Context, in *Test3Req, opts ...grpc.CallOption) (*Test3Resp, error)
		//  CheckAuth 风控检查
		CheckAuth(ctx context.Context, in *AuthReq, opts ...grpc.CallOption) (*AuthResp, error)
		//  CheckAuth 风控检查
		Login(ctx context.Context, in *AuthReq, opts ...grpc.CallOption) (*AuthResp, error)
	}

	defaultPRpc1 struct {
		cli zrpc.Client
	}
)

func NewPRpc1(cli zrpc.Client) PRpc1 {
	return &defaultPRpc1{
		cli: cli,
	}
}

func (m *defaultPRpc1) Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	client := prpc1.NewPRpc1Client(m.cli.Conn())
	return client.Ping(ctx, in, opts...)
}

// ESGuide elastic教程
func (m *defaultPRpc1) ESGuide(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	client := prpc1.NewPRpc1Client(m.cli.Conn())
	return client.ESGuide(ctx, in, opts...)
}

// Test1 测试1
func (m *defaultPRpc1) Test1(ctx context.Context, in *Test1Req, opts ...grpc.CallOption) (*Test1Resp, error) {
	client := prpc1.NewPRpc1Client(m.cli.Conn())
	return client.Test1(ctx, in, opts...)
}

// Test2 测试2
func (m *defaultPRpc1) Test2(ctx context.Context, in *Test2Req, opts ...grpc.CallOption) (*Test2Resp, error) {
	client := prpc1.NewPRpc1Client(m.cli.Conn())
	return client.Test2(ctx, in, opts...)
}

//  Test3 测试3
func (m *defaultPRpc1) Test3(ctx context.Context, in *Test3Req, opts ...grpc.CallOption) (*Test3Resp, error) {
	client := prpc1.NewPRpc1Client(m.cli.Conn())
	return client.Test3(ctx, in, opts...)
}

//  CheckAuth 风控检查
func (m *defaultPRpc1) CheckAuth(ctx context.Context, in *AuthReq, opts ...grpc.CallOption) (*AuthResp, error) {
	client := prpc1.NewPRpc1Client(m.cli.Conn())
	return client.CheckAuth(ctx, in, opts...)
}

//  CheckAuth 风控检查
func (m *defaultPRpc1) Login(ctx context.Context, in *AuthReq, opts ...grpc.CallOption) (*AuthResp, error) {
	client := prpc1.NewPRpc1Client(m.cli.Conn())
	return client.Login(ctx, in, opts...)
}
